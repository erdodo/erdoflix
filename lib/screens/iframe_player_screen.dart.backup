import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:go_router/go_router.dart';
import '../models/film.dart';
import '../models/kaynak.dart';

class IframePlayerScreen extends StatefulWidget {
  final Film film;
  final Kaynak kaynak;

  const IframePlayerScreen({
    super.key,
    required this.film,
    required this.kaynak,
  });

  @override
  State<IframePlayerScreen> createState() => _IframePlayerScreenState();
}

class _IframePlayerScreenState extends State<IframePlayerScreen> {
  late WebViewController _webViewController;
  bool _isLoading = true;
  String? _capturedVideoUrl;
  bool _isAnalyzing = true;
  Timer? _videoCheckTimer;

  // TV-friendly kontroller
  int _focusedControl = 0; // 0: Geri, 1: Yeniden Yükle, 2: Native Player
  final List<String> _networkLogs = [];

  @override
  void initState() {
    super.initState();
    _initializeWebView();

    // Landscape moda geç
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.landscapeRight,
    ]);
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);

    // 30 saniye sonra analiz göstergesini kapat (arka planda dinlemeye devam eder)
    Timer(const Duration(seconds: 30), () {
      if (mounted && _capturedVideoUrl == null) {
        setState(() {
          _isAnalyzing = false;
        });
      }
    });

    // Her 3 saniyede bir video elementlerini kontrol et
    _videoCheckTimer = Timer.periodic(const Duration(seconds: 3), (timer) {
      if (_capturedVideoUrl == null) {
        _checkVideoElements();
      } else {
        timer.cancel();
      }
    });
  }

  void _checkVideoElements() async {
    try {
      // Video elementlerini kontrol et
      const jsCode = '''
        (function() {
          const videos = document.querySelectorAll('video');
          const sources = [];
          
          videos.forEach(function(video) {
            if (video.src) sources.push(video.src);
            if (video.currentSrc) sources.push(video.currentSrc);
            
            // Source elementlerini kontrol et
            video.querySelectorAll('source').forEach(function(source) {
              if (source.src) sources.push(source.src);
            });
          });
          
          return sources.filter(function(src) {
            return src && src.length > 0;
          });
        })();
      ''';

      final result = await _webViewController.runJavaScriptReturningResult(jsCode);
      debugPrint('🔍 Periyodik video kontrolü: $result');
    } catch (e) {
      debugPrint('❌ Video kontrol hatası: $e');
    }
  }

  void _initializeWebView() {
    _webViewController = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setBackgroundColor(Colors.black)
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageStarted: (String url) {
            debugPrint('🌐 Page started loading: $url');
          },
          onPageFinished: (String url) {
            debugPrint('✅ Page finished loading: $url');
            if (mounted) {
              setState(() {
                _isLoading = false;
              });
            }
            // Network isteklerini izlemeye başla
            _injectNetworkInterceptor();
          },
          onWebResourceError: (WebResourceError error) {
            debugPrint('❌ WebView Error: ${error.description}');
          },
        ),
      )
      ..loadRequest(Uri.parse(widget.kaynak.url));
  }

  void _injectNetworkInterceptor() {
    // JavaScript ile network isteklerini dinle
    const jsCode = '''
      (function() {
        // XMLHttpRequest'i intercept et
        const originalOpen = XMLHttpRequest.prototype.open;
        const originalSend = XMLHttpRequest.prototype.send;

        XMLHttpRequest.prototype.open = function(method, url) {
          this._url = url;
          return originalOpen.apply(this, arguments);
        };

        XMLHttpRequest.prototype.send = function() {
          const url = this._url;
          const xhr = this;
          
          // Response body'yi kontrol et
          xhr.addEventListener('load', function() {
            if (xhr.status === 200 && xhr.responseText) {
              const responseText = xhr.responseText.substring(0, 200); // İlk 200 karakter
              
              // M3U8 playlist kontrolü (#EXTM3U ile başlıyor mu?)
              if (responseText.includes('#EXTM3U') || responseText.includes('#EXT-X-')) {
                window.flutter_network_log.postMessage(JSON.stringify({
                  type: 'video',
                  url: url,
                  method: 'XHR_M3U8_CONTENT',
                  contentType: 'application/x-mpegURL'
                }));
              }
            }
          });
          
          if (url) {
            // Daha geniş format desteği
            const videoFormats = ['.m3u8', '.mp4', '.ts', '.mkv', '.avi', '.webm', '.mov', '.flv', '.m4v'];
            const isVideo = videoFormats.some(format => url.toLowerCase().includes(format));
            
            // Video streaming pattern'leri
            const streamPatterns = ['hls', 'dash', 'video', 'stream', 'manifest', 'playlist'];
            const isStream = streamPatterns.some(pattern => url.toLowerCase().includes(pattern));
            
            if (isVideo || isStream) {
              window.flutter_network_log.postMessage(JSON.stringify({
                type: 'video',
                url: url,
                method: 'XHR'
              }));
            }
          }
          return originalSend.apply(this, arguments);
        };

        // Fetch API'yi intercept et
        const originalFetch = window.fetch;
        window.fetch = function(url, options) {
          const requestUrl = typeof url === 'string' ? url : url.url;
          
          // Response body'yi kontrol et
          const promise = originalFetch.apply(this, arguments);
          promise.then(function(response) {
            if (response.ok && response.status === 200) {
              // Response'u clone et (orijinali bozmamak için)
              const clonedResponse = response.clone();
              clonedResponse.text().then(function(text) {
                const responseText = text.substring(0, 200); // İlk 200 karakter
                
                // M3U8 playlist kontrolü (#EXTM3U ile başlıyor mu?)
                if (responseText.includes('#EXTM3U') || responseText.includes('#EXT-X-')) {
                  window.flutter_network_log.postMessage(JSON.stringify({
                    type: 'video',
                    url: requestUrl,
                    method: 'FETCH_M3U8_CONTENT',
                    contentType: 'application/x-mpegURL'
                  }));
                }
              }).catch(function(e) {
                // Text parse hatası
              });
            }
          }).catch(function(e) {
            // Fetch hatası
          });
          
          if (typeof requestUrl === 'string') {
            const videoFormats = ['.m3u8', '.mp4', '.ts', '.mkv', '.avi', '.webm', '.mov', '.flv', '.m4v'];
            const isVideo = videoFormats.some(format => requestUrl.toLowerCase().includes(format));
            
            const streamPatterns = ['hls', 'dash', 'video', 'stream', 'manifest', 'playlist'];
            const isStream = streamPatterns.some(pattern => requestUrl.toLowerCase().includes(pattern));
            
            if (isVideo || isStream) {
              window.flutter_network_log.postMessage(JSON.stringify({
                type: 'video',
                url: requestUrl,
                method: 'FETCH'
              }));
            }
          }
          return promise;
        };

        // Video elementlerini izle
        const observer = new MutationObserver(function(mutations) {
          mutations.forEach(function(mutation) {
            mutation.addedNodes.forEach(function(node) {
              if (node.tagName === 'VIDEO') {
                const src = node.src || node.currentSrc;
                if (src) {
                  window.flutter_network_log.postMessage(JSON.stringify({
                    type: 'video',
                    url: src,
                    method: 'VIDEO_ELEMENT'
                  }));
                }
              }
            });
          });
        });

        observer.observe(document.body, {
          childList: true,
          subtree: true
        });

        // Mevcut video elementlerini kontrol et
        document.querySelectorAll('video').forEach(function(video) {
          const src = video.src || video.currentSrc;
          if (src) {
            window.flutter_network_log.postMessage(JSON.stringify({
              type: 'video',
              url: src,
              method: 'EXISTING_VIDEO'
            }));
          }
        });
      })();
    ''';

    _webViewController.runJavaScript(jsCode);

    // JavaScript channel ekle
    _webViewController.addJavaScriptChannel(
      'flutter_network_log',
      onMessageReceived: (JavaScriptMessage message) {
        try {
          final data = json.decode(message.message);
          final url = data['url'] as String?;
          final method = data['method'] as String?;
          final contentType = data['contentType'] as String?;

          if (url != null && _capturedVideoUrl == null) {
            debugPrint('🎥 Video URL yakalandı: $url');
            debugPrint('🎥 Method: $method');
            if (contentType != null) {
              debugPrint('🎥 Content-Type: $contentType');
            }

            setState(() {
              _capturedVideoUrl = url;
              final logEntry = contentType != null 
                ? '$method [$contentType]: $url'
                : '$method: $url';
              _networkLogs.add(logEntry);
            });

            // URL yakalandı, native player'a geçelim
            _showNativePlayerDialog();
          }
        } catch (e) {
          debugPrint('❌ Network log parse error: $e');
        }
      },
    );
  }

  void _showNativePlayerDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => _AutoSwitchDialog(
        capturedUrl: _capturedVideoUrl ?? '',
        onSwitch: () {
          Navigator.of(context).pop();
          _switchToNativePlayer();
        },
        onStay: () {
          Navigator.of(context).pop();
        },
      ),
    );
  }

  // Eksik metodlar buraya gelecek (build, _handleKeyEvent, vb.)
  // TEMPORARY FIX - Bu metodlar dosyanın sonunda (485+ satırlar)
}

// Otomatik geçiş dialog'u (5 saniye countdown ile)
class _AutoSwitchDialog extends StatefulWidget {
  final String capturedUrl;
  final VoidCallback onSwitch;
  final VoidCallback onStay;

  const _AutoSwitchDialog({
    required this.capturedUrl,
    required this.onSwitch,
    required this.onStay,
  });

  @override
  State<_AutoSwitchDialog> createState() => _AutoSwitchDialogState();
}

class _AutoSwitchDialogState extends State<_AutoSwitchDialog>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  Timer? _countdownTimer;
  int _remainingSeconds = 5;

  @override
  void initState() {
    super.initState();

    // Animasyon controller (5 saniye)
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 5),
    )..forward();

    // Countdown timer (her saniye güncelle)
    _countdownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (_remainingSeconds > 1) {
        setState(() {
          _remainingSeconds--;
        });
      } else {
        timer.cancel();
        // 5 saniye doldu, otomatik geç
        widget.onSwitch();
      }
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    _countdownTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      backgroundColor: Colors.black87,
      title: const Row(
        children: [
          Icon(Icons.check_circle, color: Colors.green, size: 32),
          SizedBox(width: 12),
          Text(
            'Video URL Bulundu!',
            style: TextStyle(color: Colors.white, fontSize: 20),
          ),
        ],
      ),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Video kaynağı başarıyla yakalandı.',
            style: TextStyle(color: Colors.white70, fontSize: 16),
          ),
          const SizedBox(height: 16),
          Text(
            widget.capturedUrl,
            style: const TextStyle(
              color: Colors.blue,
              fontSize: 12,
              fontFamily: 'monospace',
            ),
            maxLines: 3,
            overflow: TextOverflow.ellipsis,
          ),
          const SizedBox(height: 16),
          const Text(
            'Kendi playerımızla devam etmek ister misiniz?',
            style: TextStyle(color: Colors.white, fontSize: 14),
          ),
          const SizedBox(height: 12),
          // Countdown göstergesi
          Row(
            children: [
              Icon(Icons.timer, color: Colors.orange, size: 16),
              SizedBox(width: 8),
              Text(
                'Otomatik geçiş: $_remainingSeconds saniye',
                style: TextStyle(
                  color: Colors.orange,
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () {
            _countdownTimer?.cancel();
            widget.onStay();
          },
          child: const Text(
            'Hayır, İframe\'de Kal',
            style: TextStyle(color: Colors.grey),
          ),
        ),
        // Animasyonlu countdown button
        AnimatedBuilder(
          animation: _controller,
          builder: (context, child) {
            return Stack(
              alignment: Alignment.center,
              children: [
                // Circular progress indicator (countdown)
                SizedBox(
                  width: 50,
                  height: 50,
                  child: CircularProgressIndicator(
                    value: _controller.value,
                    strokeWidth: 3,
                    backgroundColor: Colors.grey[800],
                    valueColor: AlwaysStoppedAnimation<Color>(
                      Color.lerp(Colors.green, Colors.red, _controller.value)!,
                    ),
                  ),
                ),
                // Button
                ElevatedButton.icon(
                  onPressed: () {
                    _countdownTimer?.cancel();
                    _controller.stop();
                    widget.onSwitch();
                  },
                  icon: const Icon(Icons.play_circle_fill),
                  label: Text('Player\'a Geç ($_remainingSeconds)'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(
                      horizontal: 20,
                      vertical: 12,
                    ),
                  ),
                ),
              ],
            );
          },
        ),
      ],
    );
  }
  @override
  Widget build(BuildContext context) {
    return PopScope(
      canPop: true,
      child: RawKeyboardListener(
        focusNode: FocusNode()..requestFocus(),
        onKey: _handleKeyEvent,
        child: Scaffold(
          backgroundColor: Colors.black,
          body: Stack(
            children: [
              // WebView
              if (!_isLoading) WebViewWidget(controller: _webViewController),

              // Loading indicator
              if (_isLoading)
                const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      CircularProgressIndicator(color: Colors.red),
                      SizedBox(height: 16),
                      Text(
                        'İframe yükleniyor...',
                        style: TextStyle(color: Colors.white, fontSize: 16),
                      ),
                    ],
                  ),
                ),

              // HEADER - Kalıcı Kontroller (üst)
              Positioned(
                top: 0,
                left: 0,
                right: 0,
                child: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: [
                        Colors.black.withOpacity(0.9),
                        Colors.black.withOpacity(0.7),
                        Colors.transparent,
                      ],
                    ),
                  ),
                  padding: const EdgeInsets.symmetric(
                    horizontal: 20,
                    vertical: 16,
                  ),
                  child: SafeArea(
                    child: Row(
                      children: [
                        // Geri butonu
                        Material(
                          color: Colors.transparent,
                          child: InkWell(
                            onTap: _handleBack,
                            borderRadius: BorderRadius.circular(8),
                            child: Container(
                              padding: const EdgeInsets.all(8),
                              decoration: BoxDecoration(
                                color: _focusedControl == 0
                                    ? Colors.red.withOpacity(0.3)
                                    : Colors.white.withOpacity(0.1),
                                borderRadius: BorderRadius.circular(8),
                                border: Border.all(
                                  color: _focusedControl == 0
                                      ? Colors.red
                                      : Colors.transparent,
                                  width: 2,
                                ),
                              ),
                              child: const Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Icon(
                                    Icons.arrow_back,
                                    color: Colors.white,
                                    size: 20,
                                  ),
                                  SizedBox(width: 4),
                                  Text(
                                    'Geri',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 14,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 12),

                        // Film bilgisi
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Text(
                                widget.film.baslik,
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                              const SizedBox(height: 2),
                              Row(
                                children: [
                                  Container(
                                    padding: const EdgeInsets.symmetric(
                                      horizontal: 6,
                                      vertical: 2,
                                    ),
                                    decoration: BoxDecoration(
                                      color: Colors.blue.withOpacity(0.3),
                                      borderRadius: BorderRadius.circular(4),
                                      border: Border.all(
                                        color: Colors.blue,
                                        width: 1,
                                      ),
                                    ),
                                    child: const Text(
                                      'IFRAME',
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 10,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ),
                                  const SizedBox(width: 8),
                                  Text(
                                    widget.kaynak.baslik,
                                    style: const TextStyle(
                                      color: Colors.white70,
                                      fontSize: 12,
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                        const SizedBox(width: 12),

                        // Analyzing indicator
                        if (_isAnalyzing && !_isLoading)
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 6,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.orange.withOpacity(0.3),
                              borderRadius: BorderRadius.circular(6),
                              border: Border.all(
                                color: Colors.orange,
                                width: 1,
                              ),
                            ),
                            child: const Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                SizedBox(
                                  width: 12,
                                  height: 12,
                                  child: CircularProgressIndicator(
                                    strokeWidth: 2,
                                    color: Colors.white,
                                  ),
                                ),
                                SizedBox(width: 6),
                                Text(
                                  'Analiz...',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 11,
                                  ),
                                ),
                              ],
                            ),
                          ),

                        // Video URL yakalandı
                        if (_capturedVideoUrl != null)
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 6,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.green.withOpacity(0.3),
                              borderRadius: BorderRadius.circular(6),
                              border: Border.all(
                                color: Colors.green,
                                width: 1,
                              ),
                            ),
                            child: const Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                Icon(Icons.check_circle,
                                    color: Colors.white, size: 14),
                                SizedBox(width: 6),
                                Text(
                                  'URL Bulundu',
                                  style: TextStyle(
                                    color: Colors.white,
                                    fontSize: 11,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                          ),

                        const SizedBox(width: 12),

                        // Yeniden yükle butonu
                        Material(
                          color: Colors.transparent,
                          child: InkWell(
                            onTap: _reloadPage,
                            borderRadius: BorderRadius.circular(8),
                            child: Container(
                              padding: const EdgeInsets.all(8),
                              decoration: BoxDecoration(
                                color: _focusedControl == 1
                                    ? Colors.red.withOpacity(0.3)
                                    : Colors.white.withOpacity(0.1),
                                borderRadius: BorderRadius.circular(8),
                                border: Border.all(
                                  color: _focusedControl == 1
                                      ? Colors.red
                                      : Colors.transparent,
                                  width: 2,
                                ),
                              ),
                              child: const Icon(
                                Icons.refresh,
                                color: Colors.white,
                                size: 20,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 8),

                        // Kaynak seçim menüsü
                        if (widget.film.kaynaklar != null &&
                            widget.film.kaynaklar!.length > 1)
                          _buildKaynakMenu(),

                        const SizedBox(width: 8),

                        // Native Player butonu (sadece URL yakalandıysa)
                        if (_capturedVideoUrl != null)
                          Material(
                            color: Colors.transparent,
                            child: InkWell(
                              onTap: _switchToNativePlayer,
                              borderRadius: BorderRadius.circular(8),
                              child: Container(
                                padding: const EdgeInsets.all(8),
                                decoration: BoxDecoration(
                                  color: _focusedControl == 2
                                      ? Colors.red.withOpacity(0.3)
                                      : Colors.green.withOpacity(0.2),
                                  borderRadius: BorderRadius.circular(8),
                                  border: Border.all(
                                    color: _focusedControl == 2
                                        ? Colors.red
                                        : Colors.green,
                                    width: 2,
                                  ),
                                ),
                                child: const Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    Icon(
                                      Icons.play_circle_fill,
                                      color: Colors.white,
                                      size: 20,
                                    ),
                                    SizedBox(width: 4),
                                    Text(
                                      'Player',
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 14,
                                        fontWeight: FontWeight.bold,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          ),
                      ],
                    ),
                  ),
                ),
              ),

              // Network logs (debug - alt sağ köşe)
              if (_networkLogs.isNotEmpty)
                Positioned(
                  bottom: 20,
                  right: 20,
                  child: Container(
                    constraints: const BoxConstraints(maxWidth: 300, maxHeight: 150),
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.black.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.green, width: 1),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        const Row(
                          children: [
                            Icon(Icons.bug_report, color: Colors.green, size: 16),
                            SizedBox(width: 6),
                            Text(
                              'Network Logs:',
                              style: TextStyle(
                                color: Colors.white,
                                fontSize: 11,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Expanded(
                          child: SingleChildScrollView(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: _networkLogs.map((log) {
                                return Padding(
                                  padding: const EdgeInsets.symmetric(vertical: 2),
                                  child: Text(
                                    log,
                                    style: const TextStyle(
                                      color: Colors.greenAccent,
                                      fontSize: 9,
                                      fontFamily: 'monospace',
                                    ),
                                  ),
                                );
                              }).toList(),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

}
